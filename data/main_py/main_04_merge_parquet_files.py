# -*- coding: utf-8 -*-
"""
Created on Thu Mar 30 15:14:05 2023

@author: localadmin
"""
import os
import sys
import pandas as pd
from pathlib import Path
sys.path.append(os.path.join('..','func_py'))

def my_func_all_files(path_beats_loc):
    isExist = os.path.exists(path_beats_loc)
    if not isExist:
        list_of_files_loc = []
    else:
        list_of_files_loc = sorted( filter( lambda x: os.path.isfile(os.path.join(path_beats_loc, x)),
                                os.listdir(path_beats_loc) ) )
        
    return list_of_files_loc

def my_func_concate_df(list_of_files_loc,path_input):
    flag_new_UID = True
    total_ii = len(list_of_files_loc)
    for count_ii,this_file_name in enumerate(list_of_files_loc):
        # Read parquet file.
        print('Debug:',count_ii,'/',total_ii,':',this_file_name)
        df_test_loc = pd.read_parquet(os.path.join(path_input,this_file_name), engine="fastparquet")
        print('Debug:',df_test_loc.columns)
        # Save it in a dataframe.
        if flag_new_UID:
            df_Beats_Loc_all = df_test_loc.copy()
            flag_new_UID = False
        else:
            df_Beats_Loc_all = pd.concat([df_Beats_Loc_all,df_test_loc], axis=1)
        # Close the parquet file.

    print('Finished concatenate the UID',UID)
    return df_Beats_Loc_all

def my_func_for_loop(path_input,path_output,appendix_name):
    list_of_files = my_func_all_files(path_input)
    if len(list_of_files) > 0:
        df_all = my_func_concate_df(list_of_files,path_input)
        
        # Save the bigger parquet file for each UID.  
        temp_file = os.path.join(path_output,UID+appendix_name)
        df_all.to_parquet(temp_file, compression=None)
        print('Path is:',temp_file)
        return True
    else:
        df_all = []
        return False
    
# Get all the UIDs that were generated by MATLAB.
get_UID_list = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\mat_for_load_Final_Clinical_Trial_Data'
dir_list_UID = os.listdir(get_UID_list)
first_3_char = list(set([x[:3] for x in dir_list_UID]))
# first_3_char_unique = [x for x in first_3_char if x[0] == '0' or x[0] == '1']
first_3_char_unique = [x for x in first_3_char if x[0] == '3' or x[0] == '4']
first_3_char_unique.sort()

path_beats_loc = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_Beats_Loc'
path_beats_rhythm = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_Beats_Rhythm'
path_beats_type = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_Beats_Type'
path_ECG_valid = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Valid'
path_ECG_raw = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Raw'
path_ECG_timestamp = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Timestamp'


path_beats_loc_output = path_beats_loc+'_each_UID'
path_beats_rhythm_output = path_beats_rhythm+'_each_UID'
path_beats_type_output= path_beats_type+'_each_UID'
path_ECG_valid_output = path_ECG_valid+'_each_UID'
path_ECG_raw_output = path_ECG_raw+'_each_UID'
path_ECG_timestamp_output = path_ECG_timestamp+'_each_UID'

Path(path_beats_loc_output).mkdir(parents=True, exist_ok=True)
Path(path_beats_rhythm_output).mkdir(parents=True, exist_ok=True)
Path(path_beats_type_output).mkdir(parents=True, exist_ok=True)
Path(path_ECG_valid_output).mkdir(parents=True, exist_ok=True)
Path(path_ECG_raw_output).mkdir(parents=True, exist_ok=True)
Path(path_ECG_timestamp_output).mkdir(parents=True, exist_ok=True)

# temp_UIDs = first_3_char_unique[62:63]
temp_UIDs = first_3_char_unique
for UID in temp_UIDs:
    # 1: Beats Loc
    path_input = os.path.join(path_beats_loc,UID)
    path_output = path_beats_loc_output
    appendix_name = '_Solo_Beats_Loc.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the Beats_Loc parquet of UID',UID)
    
    # 2: Beats Rhythm
    path_input = os.path.join(path_beats_rhythm,UID)
    path_output = path_beats_rhythm_output
    appendix_name = '_Solo_Beats_Rhythm.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the Beats_Rhythm parquet of UID',UID)
    
    # 3: Beats Type
    path_input = os.path.join(path_beats_type,UID)
    path_output = path_beats_type_output
    appendix_name = '_Solo_Beats_Type.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the Beats_Type parquet of UID',UID)
    
    # 4: ECG Valid
    path_input = os.path.join(path_ECG_valid,UID)
    path_output = path_ECG_valid_output
    appendix_name = '_Solo_ECG_Valid.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the ECG_Valid parquet of UID',UID)
    
    # 5: ECG Raw
    path_input = os.path.join(path_ECG_raw,UID)
    path_output = path_ECG_raw_output
    appendix_name = '_Solo_ECG_Raw.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the ECG_Raw parquet of UID',UID)
    
    # 6: ECG Timestamp
    path_input = os.path.join(path_ECG_timestamp,UID)
    path_output = path_ECG_timestamp_output
    appendix_name = '_Solo_ECG_Timestamp.parquet'
    my_func_for_loop(path_input,path_output,appendix_name)
    print('Saved the ECG_Timestamp parquet of UID',UID)
    
    
