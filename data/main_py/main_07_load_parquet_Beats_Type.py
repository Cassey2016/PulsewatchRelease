# -*- coding: utf-8 -*-
"""
Created on Mon Apr  3 11:11:14 2023

@author: localadmin
"""

# Write a function to check how many are not normal and z noisy
# How many of them have more than 15 sec of noise.??

import pandas as pd
import os
import numpy as np
from pathlib import Path
import time
import math
path_Beats_Rhythm = r'/mnt/r/ENGR_Chon/NIH_Pulsewatch_Database/Parquet_Files/Solo_Beats_Rhythm_each_UID'
path_Beats_Type = r'/mnt/r/ENGR_Chon/NIH_Pulsewatch_Database/Parquet_Files/Solo_Beats_Type_each_UID'
path_output = r'/mnt/r/ENGR_Chon/NIH_Pulsewatch_Database/Parquet_Files/Solo_Beats_Rhythm_Type_count'
Path(path_output).mkdir(parents=True, exist_ok=True)

fs_ECG = 250

# Get all the UIDs that were generated by MATLAB.
get_UID_list = r'/mnt/r/ENGR_Chon/NIH_Pulsewatch_Database/mat_for_load_Final_Clinical_Trial_Data'
dir_list_UID = os.listdir(get_UID_list)
first_3_char = list(set([x[:3] for x in dir_list_UID]))
first_3_char_unique = [x for x in first_3_char if x[0] == '0' or x[0] == '1'] # Dong: I commented out on 05/30/2023 for AF trial UID 408.
# first_3_char_unique = [x for x in first_3_char if x[0] == '3' or x[0] == '4'] #
first_3_char_unique.sort()

## For loop for each UID.
# temp_UIDs = first_3_char_unique[-40:]
temp_UIDs = first_3_char_unique[62:] # Dong, 05/30/2023: only for UID 408.
# print('first_3_char_unique',first_3_char_unique)
# print('temp_UIDs',temp_UIDs)
for UID in temp_UIDs:
# if True:
    # UID = temp_UIDs
    filename_Beats_Rhythm = UID+'_Solo_Beats_Rhythm.parquet'
    filename_Beats_Type = UID+'_Solo_Beats_Type.parquet'
    if os.path.isfile(os.path.join(path_Beats_Rhythm,filename_Beats_Rhythm)):
        print('Loading Beats Rhythm...')
        start = time.time()
        df_Beats_Rhythm = pd.read_parquet(os.path.join(path_Beats_Rhythm,filename_Beats_Rhythm), engine="fastparquet")
        # print('df_Beats_Rhythm')
        # print(df_Beats_Rhythm)
        end = time.time()
        print('Loaded Beats Rhythm, spent',end - start,'sec for size',df_Beats_Rhythm.shape)
        print('Loading Beats Type...')
        start = time.time()
        df_Beats_Type = pd.read_parquet(os.path.join(path_Beats_Type,filename_Beats_Type), engine="fastparquet")
        # print('df_Beats_Type')
        # print(df_Beats_Type)
        end = time.time()
        print('Load Beats Type spent',end - start,'sec for size',df_Beats_Rhythm.shape)
        
        ## Another for loop
        column_name = df_Beats_Rhythm.columns # File name.
        flag_new_UID = True
        total_rows = len(column_name)
        for rr, this_column_name in enumerate(column_name):
        # if True:
        #     rr = 0
            this_column_name = column_name[rr]
            ## Debugging lines:
            temp_column_name = df_Beats_Type.columns
            not_in_rr = []
            not_in_name = []
            for temp_rr, tt in enumerate(temp_column_name):
                if tt not in column_name:
                    print('row',temp_rr,tt,'in df_Beats_Type not in df_Beats_Rhythm')
                    not_in_rr.append(temp_rr)
                    not_in_name.append(tt)
            not_in_rr_np = np.array(not_in_rr)
            not_in_rr_diff = np.diff(not_in_rr_np)
            # print(rr,'/',total_rows,':',this_column_name)
            this_Beats_Rhythm = df_Beats_Rhythm[this_column_name].tolist() 
            this_Beats_Type = df_Beats_Type[this_column_name].tolist() # Same file name.
            
            # to remove None values in list
            this_Beats_Rhythm_clean = list(filter(lambda item: item is not None, this_Beats_Rhythm))
            this_Beats_Type_clean = list(filter(lambda item: item is not None, this_Beats_Type))
            
            count_Type_N = 0
            count_Type_V = 0
            count_Type_A = 0
            count_Type_Q = 0
            count_Type_Z = 0
            count_Type_unseen = 0
            for this_Type in this_Beats_Type_clean:
                if this_Type == 'N':
                    count_Type_N += 1
                elif this_Type == 'V':
                    count_Type_V += 1
                elif this_Type == 'A' or this_Type == 'a':
                    count_Type_A += 1
                elif this_Type == 'Q':
                    count_Type_Q += 1
                elif this_Type == 'Z':
                    count_Type_Z += 1
                else:
                    if type(this_Type) == str:
                        count_Type_unseen += 0
                        print('Unseen Type:',this_Type)
                    
            count_Rhythm_N = 0
            count_Rhythm_A = 0
            count_Rhythm_B = 0
            count_Rhythm_T = 0
            count_Rhythm_S = 0
            count_Rhythm_V = 0
            count_Rhythm_G = 0
            count_Rhythm_H = 0
            count_Rhythm_unseen = 0
            for this_Rhythm in this_Beats_Rhythm_clean:
                if this_Rhythm == 'N':
                    count_Rhythm_N += 1
                elif this_Rhythm == 'A':
                    count_Rhythm_A += 1
                elif this_Rhythm == 'B':
                    count_Rhythm_B += 1
                elif this_Rhythm == 'T':
                    count_Rhythm_T += 1
                elif this_Rhythm == 'S':
                    count_Rhythm_S += 1
                elif this_Rhythm == 'V':
                    count_Rhythm_V += 1
                elif this_Rhythm == 'G':
                    count_Rhythm_G += 1
                elif this_Rhythm == 'H':
                    count_Rhythm_H += 1
                else:
                    if type(this_Rhythm) == str:
                        count_Rhythm_unseen += 0
                        print('Unseen Rhythm:',this_Rhythm)
                
            # Create a dataframe with same column name, put the sum of invalid samples in there.
            
            
            if flag_new_UID:
                df_Beats_Type_Rhythm = pd.DataFrame()
                df_Beats_Type_Rhythm[this_column_name] = [count_Type_N,count_Type_V,count_Type_A,count_Type_Q,count_Type_Z,count_Type_unseen,\
                                           count_Rhythm_N,count_Rhythm_A,count_Rhythm_B,count_Rhythm_T,count_Rhythm_S,count_Rhythm_V,count_Rhythm_G,count_Rhythm_H,count_Rhythm_unseen]
                flag_new_UID = False
            else:
                df_Beats_Type_Rhythm.insert(rr, this_column_name, [count_Type_N,count_Type_V,count_Type_A,count_Type_Q,count_Type_Z,count_Type_unseen,\
                                           count_Rhythm_N,count_Rhythm_A,count_Rhythm_B,count_Rhythm_T,count_Rhythm_S,count_Rhythm_V,count_Rhythm_G,count_Rhythm_H,count_Rhythm_unseen], \
                                            allow_duplicates=False)
        
                
        
        print('Finished count time for UID',UID)
        filename_output = UID+'_Beats_Rhythm_Type.parquet'
        df_Beats_Type_Rhythm.to_parquet(os.path.join(path_output,filename_output), compression=None)
        print('Saved DataFrame to:',os.path.join(path_output,filename_output))