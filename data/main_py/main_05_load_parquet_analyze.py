# -*- coding: utf-8 -*-
"""
Created on Sun Apr  2 13:41:48 2023

@author: localadmin
"""
import pandas as pd
import os
import numpy as np
from pathlib import Path
import time

path_ECG_Valid = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Valid_each_UID'
path_ECG_Timestamp = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Timestamp_each_UID'
path_output = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\Parquet_Files\Solo_ECG_Invalid_count_time'
Path(path_output).mkdir(parents=True, exist_ok=True)

fs_ECG = 250

# Get all the UIDs that were generated by MATLAB.
get_UID_list = r'R:\ENGR_Chon\NIH_Pulsewatch_Database\mat_for_load_Final_Clinical_Trial_Data'
dir_list_UID = os.listdir(get_UID_list)
first_3_char = list(set([x[:3] for x in dir_list_UID]))
first_3_char_unique = [x for x in first_3_char if x[0] == '0' or x[0] == '1']
first_3_char_unique.sort()

## For loop for each UID.
temp_UIDs = first_3_char_unique[23:]

for UID in temp_UIDs:
    filename_ECG_Valid = UID+'_Solo_ECG_Valid.parquet'
    filename_ECG_Timestamp = UID+'_Solo_ECG_Timestamp.parquet'
    if os.path.isfile(os.path.join(path_ECG_Valid,filename_ECG_Valid)):
        print('Loading ECG Valid...')
        start = time.time()
        df_ECG_Valid = pd.read_parquet(os.path.join(path_ECG_Valid,filename_ECG_Valid), engine="fastparquet")
        end = time.time()
        print('Loaded ECG Valid, spent',end - start,'sec for size',df_ECG_Valid.shape)
        print('Loading ECG Timestamp...')
        start = time.time()
        df_ECG_Timestamp = pd.read_parquet(os.path.join(path_ECG_Timestamp,filename_ECG_Timestamp), engine="fastparquet")
        end = time.time()
        print('Load ECG Timestamp spent',end - start,'sec for size',df_ECG_Valid.shape)
        
        ## Another for loop
        column_name = df_ECG_Valid.columns # File name.
        flag_new_UID = True
        total_rows = len(column_name)
        for rr, this_column_name in enumerate(column_name):
        # if True:
        #     rr = 10
        #     this_column_name = column_name[rr]
            print(rr,'/',total_rows,':',this_column_name)
            this_ECG_Valid = df_ECG_Valid[this_column_name].tolist() 
            this_ECG_Timestamp = df_ECG_Timestamp[this_column_name].tolist() # Same file name.
            
            # to remove None values in list
            this_ECG_Valid_clean = list(filter(lambda item: item is not None, this_ECG_Valid))
            this_ECG_Timestamp_clean = list(filter(lambda item: not np.isnan(item), this_ECG_Timestamp))
            
            diff_Timestamp = np.diff(this_ECG_Timestamp_clean)
            
            # For a list: diff_Timestamp.insert(0,diff_Timestamp[0])
            if len(diff_Timestamp) > 0:
                diff_Timestamp_new = np.insert(diff_Timestamp, [0], diff_Timestamp[0], axis=0)
                invalid_diff_Timestamp = [diff_Timestamp_new[idx] for idx,vv in enumerate(this_ECG_Valid_clean) if vv == 'F']
                total_invalid_time = np.sum(invalid_diff_Timestamp) # Accurate time.
                
                count_Valid = this_ECG_Valid_clean.count('T')
                count_Invalid = this_ECG_Valid_clean.count('F')
                
                count_Invalid_time = count_Invalid/fs_ECG # Guess the sampling frequency is always 250 Hz.
            else:
                total_invalid_time = None
                count_Invalid_time = None
                
                
            # Create a dataframe with same column name, put the sum of invalid samples in there.
            if flag_new_UID:
                df_ECG_Valid_time = pd.DataFrame()
                df_ECG_Valid_time[this_column_name] = [total_invalid_time]
                flag_new_UID = False
            else:
                df_ECG_Valid_time.insert(rr, this_column_name, [total_invalid_time], allow_duplicates=False)
        
                
        
        print('Finished count time for UID',UID)
        filename_output = UID+'_Invalid_count_time.parquet'
        df_ECG_Valid_time.to_parquet(os.path.join(path_output,filename_output), compression=None)
        print('Saved DataFrame to:',os.path.join(path_output,filename_output))